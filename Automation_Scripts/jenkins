pipeline {
    agent any
    environment {
        EXCEL_FILE_URL = 'https://raw.githubusercontent.com/StalkerJocca/AutomationExcel/main/Excel_Files/teste.xlsx'
        EXCEL_FILE_PATH = 'excel-file.xlsx'
        CSV_FILE_PATH = 'excel-file.csv'
        CLEANED_CSV_FILE_PATH = 'cleaned-excel-file.csv'
        HTML_FILE_PATH = 'excel-data.html'
        GITHUB_REPO_URL = 'https://github.com/StalkerJocca/AutomationExcel.git'
        GITHUB_BRANCH = 'main'
        GITHUB_FOLDER = 'Exported_HTML_Files'
        GITHUB_CREDENTIALS_ID = 'github-credentials' // Change this to your actual credentials ID
    }
    stages {
        stage('Download Excel File') {
            steps {
                script {
                    try {
                        // Download the Excel file from URL
                        sh """
                            curl -o ${EXCEL_FILE_PATH} ${EXCEL_FILE_URL}
                        """
                    } catch (e) {
                        echo "Error downloading Excel file: ${e.message}"
                        throw e
                    }
                }
            }
        }
        stage('Convert Excel to CSV') {
            steps {
                script {
                    try {
                        // Convert the Excel file to CSV using csvkit
                        sh """
                            in2csv ${EXCEL_FILE_PATH} > ${CSV_FILE_PATH}
                        """
                    } catch (e) {
                        echo "Error converting Excel to CSV: ${e.message}"
                        throw e
                    }
                }
            }
        }
        stage('Clean CSV File') {
            steps {
                script {
                    def csvContent = readFile file: "${CSV_FILE_PATH}"
                    def rows = csvContent.split('\n').findAll { it.trim() }
                    if (rows.size() > 0) {
                        def headers = rows[0].split(',').collect { it.trim() }
                        def dataRows = rows[1..-1]

                        // Clean headers by assigning default names to unnamed columns
                        def cleanedHeaders = headers.collect { header, index ->
                            header ? header : "UnnamedColumn${index+1}"
                        }

                        def cleanedCSVContent = cleanedHeaders.join(',') + '\n' + dataRows.join('\n')
                        writeFile file: "${CLEANED_CSV_FILE_PATH}", text: cleanedCSVContent
                    } else {
                        error "CSV file is empty or malformed."
                    }
                }
            }
        }
        stage('Generate HTML from CSV') {
            steps {
                script {
                    // Read the cleaned CSV file
                    def csvContent = readFile file: "${CLEANED_CSV_FILE_PATH}"
                    def rows = csvContent.split('\n').findAll { it.trim() }
                    
                    if (rows.size() > 0) {
                        def headers = rows[0].split(',').collect { it.trim() }
                        def dataRows = rows[1..-1]

                        def tableSections = ["Analyse_and_Testing", "Development_and_Scope", "Expected_Dates_of_Deployment", "Resume"]
                        def currentSection = null
                        def htmlContent = """
                        <!DOCTYPE html>
                        <html lang="en">
                        <head>
                            <meta charset="UTF-8">
                            <meta name="viewport" content="width=device-width, initial-scale=1.0">
                            <title>CSV Data</title>
                            <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
                        </head>
                        <body>
                            <div class="container">
                        """

                        dataRows.each { row ->
                            def cells = row.split(',').collect { it.trim() }
                            if (tableSections.contains(cells[0])) {
                                if (currentSection != null) {
                                    htmlContent += """
                                            </tbody>
                                        </table>
                                    """
                                }
                                currentSection = cells[0]
                                htmlContent += """
                                    <h2 class="text-center mt-5">${currentSection.replace('_', ' ')}</h2>
                                    <table class="table table-striped table-bordered mt-3">
                                        <thead>
                                            <tr>
                                                ${headers.collect { header -> "<th>${header}</th>" }.join('')}
                                            </tr>
                                        </thead>
                                        <tbody>
                                """
                            } else {
                                if (currentSection == null) {
                                    htmlContent += """
                                        <p class="text-center">${cells.join(' ')}</p>
                                    """
                                } else {
                                    htmlContent += """
                                        <tr>${cells.collect { cell -> "<td>${cell}</td>" }.join('')}</tr>
                                    """
                                }
                            }
                        }

                        if (currentSection != null) {
                            htmlContent += """
                                    </tbody>
                                </table>
                            """
                        }

                        htmlContent += """
                            </div>
                            <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
                            <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
                            <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
                        </body>
                        </html>
                        """

                        writeFile file: "${HTML_FILE_PATH}", text: htmlContent
                    } else {
                        error "Cleaned CSV file is empty or malformed."
                    }
                    
                    // Write the HTML content to a file
                    // writeFile file: "${HTML_FILE_PATH}", text: htmlContent
                    
                     // Archive the HTML file in Jenkins
                    archiveArtifacts artifacts: "${HTML_FILE_PATH}", allowEmptyArchive: true

                    // Show the path of the created HTML file
                    echo "HTML file created: ${env.WORKSPACE}/${HTML_FILE_PATH}"

                    // Optionally, you can make the HTML file available for download
                    echo "HTML file created: ${HTML_FILE_PATH}"
                }
            }
        }
        stage('Upload HTML to GitHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${GITHUB_CREDENTIALS_ID}", usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_PASSWORD')]) {
                    script {
                        def incrementedHTMLFilePath = sh(script: """
                            cd AutomationExcel/${GITHUB_FOLDER}
                            baseName=\$(basename "${HTML_FILE_PATH}" .html)
                            extension=".html"
                            index=1
                            while [ -f "\${baseName}_\${index}\${extension}" ]; do
                                index=\$((index + 1))
                            done
                            echo "\${baseName}_\${index}\${extension}"
                        """, returnStdout: true).trim()

                        sh """
                            if [ -d "AutomationExcel" ]; then
                                cd AutomationExcel
                                git pull
                            else
                                git clone https://${GITHUB_USERNAME}:${GITHUB_PASSWORD}@github.com/StalkerJocca/AutomationExcel.git
                                cd AutomationExcel
                            fi
                            mkdir -p ${GITHUB_FOLDER}
                            cp ../${HTML_FILE_PATH} ${GITHUB_FOLDER}/${incrementedHTMLFilePath}
                            cd ${GITHUB_FOLDER}
                            git add ${incrementedHTMLFilePath}
                            git config user.name "${GITHUB_USERNAME}"
                            git config user.email "joaocosta1695@gmail.com"
                            git commit -m 'Automated upload of HTML file'
                            git push origin ${GITHUB_BRANCH}
                        """
                    }
                }
            }
        }
    }
}