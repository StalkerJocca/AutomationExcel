pipeline {
    agent any
    environment {
        EXCEL_FILE_URL = 'https://raw.githubusercontent.com/StalkerJocca/AutomationExcel/main/Excel_Files/teste.xlsx'
        EXCEL_FILE_PATH = 'excel-file.xlsx'
        CSV_FILE_PATH = 'excel-file.csv'
        CLEANED_CSV_FILE_PATH = 'cleaned-excel-file.csv'
        HTML_FILE_PATH = 'excel-data.html'
        GITHUB_REPO_URL = 'https://github.com/StalkerJocca/AutomationExcel.git'
        GITHUB_BRANCH = 'main'
        GITHUB_FOLDER = 'Exported_HTML_Files'
        GITHUB_CREDENTIALS_ID = 'github-credentials' // Change this to your actual credentials ID
    }
    stages {
        stage('Download Excel File') {
            steps {
                script {
                    try {
                        // Download the Excel file from URL
                        sh """
                            curl -o ${EXCEL_FILE_PATH} ${EXCEL_FILE_URL}
                        """
                    } catch (e) {
                        echo "Error downloading Excel file: ${e.message}"
                        throw e
                    }
                }
            }
        }
        stage('Convert Excel to CSV') {
            steps {
                script {
                    try {
                        // Convert the Excel file to CSV using csvkit
                        sh """
                            in2csv ${EXCEL_FILE_PATH} > ${CSV_FILE_PATH}
                        """
                    } catch (e) {
                        echo "Error converting Excel to CSV: ${e.message}"
                        throw e
                    }
                }
            }
        }
        stage('Clean CSV File') {
            steps {
                script {
                    def csvContent = readFile file: "${CSV_FILE_PATH}"
                    // Perform cleaning operations on csvContent
                    def cleanedCsvContent = csvContent.split('\n').collect { line ->
                        // Replace multiple spaces with a single space
                        line.replaceAll(/\s+/, ' ').trim()
                    }.join('\n')
                    writeFile file: "${CLEANED_CSV_FILE_PATH}", text: cleanedCsvContent
                }
            }
        }
        stage('Generate HTML from CSV') {
            steps {
                script {
                    def TYPE_KEYWORDS = ["SPRINT", "QUAL", "PRIORITY"]
                    def TYPE_HEADINGS = ["PROJECT","RESUME", "EXPECTED DATES OF DEPLOYMENT", "DATES", "DEVELOPMENT AND SCOPE", "ANALYSE AND TESTING", "DEFINITION OF GOALS", "NOTES"]
                    def csvContent = readFile file: "${CLEANED_CSV_FILE_PATH}"
                    def lines = csvContent.split('\n')
                    
                    def htmlContent = """
                    <!DOCTYPE html>
                    <html>

                    <head>
                        <title>PLANNING | SCOPE</title>
                        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
                        <style>
                            
                            container { max-width: 1000px; margin: auto; }
                            table {
                                width: 100%;
                                table-layout: fixed;
                            }
                            th, td {
                                padding: 8px;
                                text-align: left;
                                white-space: nowrap;
                                overflow: hidden;
                                text-overflow: ellipsis;
                            }
                            th {
                                background-color: #007bff;
                                color: white;
                                font-weight: bold;
                            }
                            td {
                                background-color: #f2f2f2;
                            }
                            .section-header {
                                    font-size: 18px;
                                    font-weight: bold;
                                    margin-bottom: 10px;
                                }

                            /* Add responsive header and footer styles */
                            .header {
                                    background-color: #333;
                                    color: #fff;
                                    padding: 0px;
                                    text-align: center;
                                    width: 100%;
                                    position: relative;
                                }
                            .header img {
                                    width: 70%;
                                    height: 50px;
                                    object-fit: cover;
                                    object-position: center;
                                }
                            .footer {
                                    background-color: #333;
                                    color: #fff;
                                    padding: 10px;
                                    text-align: center;
                                    clear: both;
                                    width: 100%;
                                }
                                @media (max-width: 768px) {
                                .header,.footer {
                                        padding: 5px;
                                    }
                                }
                        </style>
                    </head>

                    <tbody>
                        <div class="container">
                                <header class="header">
                                    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/3b/CACEIS_Bank_logo.svg/1280px-CACEIS_Bank_logo.svg.png" alt="CACEIS">
                                    <h1>PLANNING | SCOPE</h1>                             
                                </header>
                    """

                    boolean inTable = false
                        lines.eachWithIndex { line, index ->
                            if (line.trim().isEmpty() || line.contains("TABLE")) {
                                if (inTable) {
                                    // Close the current table
                                    htmlContent += "</tbody></table>"
                                    inTable = false
                                }
                            } else {
                                def columns = line.split(',')
                                if (columns.size() == 0) {
                                    return // Skip lines that do not have any columns
                                }

                                def firstColumn = columns[0].trim()

                                if (TYPE_KEYWORDS.any { keyword -> firstColumn.startsWith(keyword) }) {
                                    if (inTable) {
                                        // Close the current table before starting a new one
                                        htmlContent += "</tbody></table>"
                                    }
                                    inTable = true
                                    // Start a new table
                                    htmlContent += "<table class='table table-striped table-bordered'><thead><tr>"
                                    // Use the current line as header
                                    htmlContent += columns.collect { header -> "<th>${header}</th>" }.join('')
                                    htmlContent += "</tr></thead><tbody>"
                                } else if (inTable) {
                                    if (TYPE_HEADINGS.any { firstColumn.startsWith(it) }) {
                                        // Close the table when encountering "TYPE_HEADINGS"
                                        htmlContent += "</tbody></table>"
                                        inTable = false
                                        htmlContent += "<h4 class='section-header'>${columns.join(', ')}</h4>"
                                    } else {
                                        // Add row to the table
                                        htmlContent += "<tr>${columns.collect { column -> "<td>${column}</td>" }.join('')}</tr>"
                                    }
                                } else {
                                    if (TYPE_HEADINGS.any { firstColumn.startsWith(it) }) {
                                        htmlContent += "<h4 class='section-header'>${columns.join(', ')}</h4>"
                                    } else if (firstColumn.startsWith("*-")) {
                                        if (inTable) {
                                            // Close the current table
                                            htmlContent += "</tbody></table>"
                                            inTable = false
                                        }
                                       htmlContent += "<p><span style='color: #b30000;'>&bull;</span> ${columns.join(', ').replaceFirst('\\*', '')}</p>"
                                    } else {
                                        // Add paragraph
                                        def visibleColumns = columns[0..<(columns.size() - 3)]
                                        htmlContent += "<p>${visibleColumns.join(', ')}</p>"
                                    }
                                }
                            }
                        }
                        
                        if (inTable) {
                            // Close the table if still open
                            htmlContent += "</tbody></table>"
                        }

                        htmlContent += """
                                <footer class="footer">
                                    <p>&copy; 2024 João Carlos Costa</p><br>
                                    <p>Project Manager | Scrum Master - joao.costa@caceis.com</p>
                                </footer>
                                </div>
                            </body>
                            </html>
                            """

                        writeFile file: "${HTML_FILE_PATH}", text: htmlContent

                        // Archive the HTML file in Jenkins
                        archiveArtifacts artifacts: "${HTML_FILE_PATH}", allowEmptyArchive: true

                        // Show the path of the created HTML file
                        echo "HTML file created: ${env.WORKSPACE}/${HTML_FILE_PATH}"

                        // Optionally, you can make the HTML file available for downloading
                        echo "HTML file created: ${HTML_FILE_PATH}"
                }
            }
        }
        stage('Upload HTML to GitHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${GITHUB_CREDENTIALS_ID}", usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_PASSWORD')]) {
                    script {
                            def incrementedHTMLFilePath = sh(script: """
                                cd AutomationExcel/${GITHUB_FOLDER}
                                baseName=\$(basename "${HTML_FILE_PATH}" .html)
                                extension=".html"
                                index=1
                                while [ -f "\${baseName}_\${index}\${extension}" ]; do
                                    index=\$((index + 1))
                                done
                                echo "\${baseName}_\${index}\${extension}"
                            """, returnStdout: true).trim()

                            sh """
                                if [ -d "AutomationExcel" ]; then
                                    cd AutomationExcel
                                    git pull
                                else
                                    git clone https://${GITHUB_USERNAME}:${GITHUB_PASSWORD}@github.com/StalkerJocca/AutomationExcel.git
                                    cd AutomationExcel
                                fi
                                mkdir -p ${GITHUB_FOLDER}
                                cp ../${HTML_FILE_PATH} ${GITHUB_FOLDER}/${incrementedHTMLFilePath}
                                cd ${GITHUB_FOLDER}
                                git add ${incrementedHTMLFilePath}
                                git config user.name "${GITHUB_USERNAME}"
                                git config user.email "joaocosta1695@gmail.com"
                                git commit -m 'Automated upload of HTML file'
                                git push origin ${GITHUB_BRANCH}
                            """
                        }
                }
            }
        }
    }
}