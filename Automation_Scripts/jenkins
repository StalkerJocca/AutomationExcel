pipeline {
    agent any
    environment {
        EXCEL_FILE_URL = 'https://raw.githubusercontent.com/StalkerJocca/AutomationExcel/main/Excel_Files/teste.xlsx'
        EXCEL_FILE_PATH = 'excel-file.xlsx'
        CSV_FILE_PATH = 'excel-file.csv'
        CLEANED_CSV_FILE_PATH = 'cleaned-excel-file.csv'
        HTML_FILE_PATH = 'excel-data.html'
        GITHUB_REPO_URL = 'https://github.com/StalkerJocca/AutomationExcel.git'
        GITHUB_BRANCH = 'main'
        GITHUB_FOLDER = 'Exported_HTML_Files'
        GITHUB_CREDENTIALS_ID = 'github-credentials' // Change this to your actual credentials ID
    }
    stages {
        stage('Download Excel File') {
            steps {
                script {
                    try {
                        // Download the Excel file from URL
                        sh """
                            curl -o ${EXCEL_FILE_PATH} ${EXCEL_FILE_URL}
                        """
                    } catch (e) {
                        echo "Error downloading Excel file: ${e.message}"
                        throw e
                    }
                }
            }
        }
        stage('Convert Excel to CSV') {
            steps {
                script {
                    try {
                        // Convert the Excel file to CSV using csvkit
                        sh """
                            in2csv ${EXCEL_FILE_PATH} > ${CSV_FILE_PATH}
                        """
                    } catch (e) {
                        echo "Error converting Excel to CSV: ${e.message}"
                        throw e
                    }
                }
            }
        }
        stage('Clean CSV File') {
            steps {
                script {
                    def csvContent = readFile file: "${CSV_FILE_PATH}"
                    def rows = csvContent.split('\n').findAll { it.trim() }
                    if (rows.size() > 0) {
                        def headers = rows[0].split(',').collect { it.trim() }
                        def dataRows = rows[1..-1]

                        // Clean headers by assigning default names to unnamed columns
                        def cleanedHeaders = headers.collect { header, index ->
                            header ? header : "UnnamedColumn${index+1}"
                        }

                        def cleanedCSVContent = cleanedHeaders.join(',') + '\n' + dataRows.join('\n')
                        writeFile file: "${CLEANED_CSV_FILE_PATH}", text: cleanedCSVContent
                    } else {
                        error "CSV file is empty or malformed."
                    }
                }
            }
        }
        stage('Generate HTML from CSV') {
            steps {
                script {
                    // Read the cleaned CSV file
                    def csvContent = readFile file: "${CLEANED_CSV_FILE_PATH}"
                    def rows = csvContent.split('\n').findAll { it.trim() }
                    
                    if (rows.size() > 0) {
                        def headers = rows[0].split(',').collect { it.trim() }
                        def dataRows = rows[1..-1]

                        def tableSections = ["Analyse_and_Testing", "Development_and_Scope", "Expected_Dates_of_Deployment", "Resume"]
                        def currentSection = null
                        def htmlContent = """
                        <!DOCTYPE html>
                        <html lang="en">
                        <head>
                            <meta charset="UTF-8">
                            <meta name="viewport" content="width=device-width, initial-scale=1.0">
                            <title>PLANNING | SCOPE</title>
                            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
                            <style>
                                body {
                                    font-family: Arial, sans-serif;
                                    font-size: 14px;
                                }
                            .container {
                                    max-width: 800px;
                                    margin: auto;
                                    padding: 20px;
                                }
                            .table-container {
                                    margin-top: 50px;
                                }
                                table {
                                    border-collapse: collapse;
                                    width: 100%;
                                }
                                th, td {
                                    border: 1px solid #ddd;
                                    padding: 8px;
                                    text-align: left;
                                }
                                th {
                                    background-color: #f0f0f0;
                                }
                            .section-header {
                                    font-size: 18px;
                                    font-weight: bold;
                                    margin-bottom: 10px;
                                }

                                /* Add responsive header and footer styles */
                            .header {
                                    background-color: #333;
                                    color: #fff;
                                    padding: 10px;
                                    text-align: center;
                                    width: 100%;
                                    position: relative;
                                }
                            .header img {
                                    width: 70%;
                                    height: 50px;
                                    object-fit: cover;
                                    object-position: center;
                                }
                            .footer {
                                    background-color: #333;
                                    color: #fff;
                                    padding: 10px;
                                    text-align: center;
                                    clear: both;
                                    width: 100%;
                                }
                                @media (max-width: 768px) {
                                .header,.footer {
                                        padding: 5px;
                                    }
                                }
                            </style>
                        </head>
                        <body>
<                            <div class="container">
                                <header class="header">
                                <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/3b/CACEIS_Bank_logo.svg/1280px-CACEIS_Bank_logo.svg.png" alt="CACEIS">
                                   <h1>PLANNING | SCOPE</h1>                             
                                </header>
                        """

                        dataRows.each { row ->
                            def cells = row.split(',').collect { it.trim() }
                            if (cells.every { it.isEmpty() }) {
                                htmlContent += "<br><br>"
                            } else if (tableSections.contains(cells[0])) {
                                if (currentSection != null) {
                                    htmlContent += """
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                    """
                                }
                                currentSection = cells[0]
                                htmlContent += """
                                                    <h2 class='section-header'>${currentSection.replace('_', ' ').replaceAll('[_]+', ' ')}</h2>
                                                    <div class="table-container">
                                                        <table class="table table-striped table-bordered mt-3">
                                                            <thead>
                                                                <tr>
                                                                    ${headers.collect { header -> "<th>${header}</th>" }.join('')}
                                                                </tr>
                                                            </thead>
                                                            <tbody>
                                                """
                            } else if (cells[0].matches(/^[A-Za-z\s]+$/)) { // Check if the first column is a paragraph header
                                if (cells[0].equals(cells[0].toUpperCase())) { // Check if the paragraph header is all uppercase
                                    htmlContent += "<h3>${cells.join(' ')}</h3>"
                                } else {
                                    htmlContent += "<p>${cells.join(' ')}</p>"
                                }
                            } else {
                                if (currentSection != null) {
                                    htmlContent += """
                                                <tr>${cells.collect { cell -> "<td>${cell}</td>" }.join('')}</tr>
                                            """
                                } else {
                                    htmlContent += "<p>${cells.join(' ')}</p>"
                                }
                            }
                        }

                        if (currentSection != null) {
                            htmlContent += """
                                                </tbody>
                                            </table>
                                        </div>
                                        """
                        }

                        htmlContent += """
                        <footer class="footer">
                            <p>&copy; 2024 João Carlos Costa</p><br>
                            <p>Project Manager | Scrum Master - joao.costa@caceis.com</p>
                        </footer>
                            </div>
                        </body>
                        </html>
                        """


                        writeFile file: "${HTML_FILE_PATH}", text: htmlContent
                    } else {
                        error "Cleaned CSV file is empty or malformed."
                    }
                    
                     // Archive the HTML file in Jenkins
                    archiveArtifacts artifacts: "${HTML_FILE_PATH}", allowEmptyArchive: true

                    // Show the path of the created HTML file
                    echo "HTML file created: ${env.WORKSPACE}/${HTML_FILE_PATH}"

                    // Optionally, you can make the HTML file available for download
                    echo "HTML file created: ${HTML_FILE_PATH}"
                }
            }
        }
        stage('Upload HTML to GitHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${GITHUB_CREDENTIALS_ID}", usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_PASSWORD')]) {
                    script {
                        def incrementedHTMLFilePath = sh(script: """
                            cd AutomationExcel/${GITHUB_FOLDER}
                            baseName=\$(basename "${HTML_FILE_PATH}" .html)
                            extension=".html"
                            index=1
                            while [ -f "\${baseName}_\${index}\${extension}" ]; do
                                index=\$((index + 1))
                            done
                            echo "\${baseName}_\${index}\${extension}"
                        """, returnStdout: true).trim()

                        sh """
                            if [ -d "AutomationExcel" ]; then
                                cd AutomationExcel
                                git pull
                            else
                                git clone https://${GITHUB_USERNAME}:${GITHUB_PASSWORD}@github.com/StalkerJocca/AutomationExcel.git
                                cd AutomationExcel
                            fi
                            mkdir -p ${GITHUB_FOLDER}
                            cp ../${HTML_FILE_PATH} ${GITHUB_FOLDER}/${incrementedHTMLFilePath}
                            cd ${GITHUB_FOLDER}
                            git add ${incrementedHTMLFilePath}
                            git config user.name "${GITHUB_USERNAME}"
                            git config user.email "joaocosta1695@gmail.com"
                            git commit -m 'Automated upload of HTML file'
                            git push origin ${GITHUB_BRANCH}
                        """
                    }
                }
            }
        }
    }
}