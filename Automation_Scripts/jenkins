pipeline {
    agent any
    environment {
        // Define the URL or local path to the Excel file
        EXCEL_FILE_URL = 'https://raw.githubusercontent.com/StalkerJocca/AutomationExcel/main/Excel_Files/teste.xlsx'
        EXCEL_FILE_PATH = 'excel-file.xlsx'
        CSV_FILE_PATH = 'excel-file.csv'
        HTML_FILE_PATH = 'excel-data.html'
        GITHUB_REPO_URL = 'https://github.com/StalkerJocca/AutomationExcel.git'
        GITHUB_BRANCH = 'main'
        GITHUB_FOLDER = 'Exported_HTML_Files'
        GITHUB_CREDENTIALS_ID = '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'
    }
    stages {
        stage('Download Excel File') {
            steps {
                script {
                    try {
                        // Download the Excel file from URL
                        sh """
                            curl -o ${EXCEL_FILE_PATH} ${EXCEL_FILE_URL}
                        """
                    } catch (e) {
                        echo "Error downloading Excel file: ${e.message}"
                        throw e
                    }
                }
            }
        }
        stage('Convert Excel to CSV') {
            steps {
                script {
                    try {
                        // Convert the Excel file to CSV using csvkit
                        sh """
                            in2csv ${EXCEL_FILE_PATH} > ${CSV_FILE_PATH}
                        """
                    } catch (e) {
                        echo "Error converting Excel to CSV: ${e.message}"
                        throw e
                    }
                }
            }
        }
        stage('Generate HTML from CSV') {
            steps {
                script {
                    // Read the CSV file
                    def csvContent = readFile file: "${CSV_FILE_PATH}"

                    // Parse the CSV content and generate HTML
                    def htmlContent = """
                    <html>
                    <head>
                        <title>Planning</title>
                        <style>
                            body {
                                font-family: Arial, sans-serif;
                            }
                            table {
                                border-collapse: collapse;
                                width: 100%;
                            }
                            th, td {
                                border: 1px solid #ddd;
                                padding: 8px;
                                text-align: left;
                            }
                            th {
                                background-color: #f0f0f0;
                            }
                            tr:nth-child(even) {
                                background-color: #f2f2f2;
                            }
                            .header {
                                background-color: #333;
                                color: #fff;
                                padding: 10px;
                                text-align: center;
                            }
                            .footer {
                                background-color: #333;
                                color: #fff;
                                padding: 10px;
                                text-align: center;
                                clear: both;
                            }
                        </style>
                    </head>
                    <body>
                        <div class="header">
                            <h1>Planning</h1>
                        </div>
                        <table border="1">
                    """

                    csvContent.split('\n').each { line ->
                        def cells = line.split(',')
                        if (line.startsWith(',')) {
                            htmlContent += "<thead><tr>"
                            cells.each { cell ->
                                htmlContent += "<th>${cell}</th>"
                            }
                            htmlContent += "</tr></thead><tbody>"
                        } else {
                            htmlContent += "<tr>"
                            cells.each { cell ->
                                htmlContent += "<td>${cell}</td>"
                            }
                            htmlContent += "</tr>"
                        }
                    }

                    htmlContent += "</tbody></table>"
                    htmlContent += "<div class=\"footer\">Generated by Jenkins on ${new Date()}</div>"
                    htmlContent += "</body></html>"

                    // Write the HTML content to a file
                    writeFile file: "${HTML_FILE_PATH}", text: htmlContent

                    // Archive the HTML file in Jenkins
                    archiveArtifacts artifacts: "${HTML_FILE_PATH}", allowEmptyArchive: true

                    // Show the path of the created HTML file
                    echo "HTML file created: ${env.WORKSPACE}/${HTML_FILE_PATH}"

                    // Optionally, you can make the HTML file available for download
                    echo "HTML file created: ${HTML_FILE_PATH}"
                }
            }
        }
        stage('Upload HTML to GitHub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: GITHUB_CREDENTIALS_ID, usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_PASSWORD')]) {
                        // Check if the directory already exists
                        if (!fileExists('AutomationExcel')) {
                            // Clone the repository
                            git url: "${GITHUB_REPO_URL}", branch: "${GITHUB_BRANCH}"
                        }

                        // Copy the HTML file to the folder
                        sh """
                            mkdir -p AutomationExcel/${GITHUB_FOLDER}
                            cp ${HTML_FILE_PATH} AutomationExcel/${GITHUB_FOLDER}/${HTML_FILE_PATH}
                        """

                        // Change into the cloned repository
                        dir('AutomationExcel') {
                            // Set the Git author configuration
                            sh """
                                git config user.name "StalkerJocca"
                                git config user.email "joaocosta1695@gmail.com"
                            """

                            // Add and commit the changes
                            sh """
                                git add .
                                git commit -m "Automated upload of HTML file"
                            """

                            // Push the changes to the remote repository
                            git(
                                url: GITHUB_REPO_URL,
                                branch: GITHUB_BRANCH,
                                credentialsId: GITHUB_CREDENTIALS_ID
                            )
                        }
                    }
                }
            }
        }
    }
}