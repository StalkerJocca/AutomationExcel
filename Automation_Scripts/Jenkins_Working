pipeline {
    agent any
    environment {
        EXCEL_FILE_URL = 'https://raw.githubusercontent.com/StalkerJocca/AutomationExcel/main/Excel_Files/teste.xlsx'
        EXCEL_FILE_PATH = 'excel-file.xlsx'
        CSV_FILE_PATH = 'excel-file.csv'
        CLEANED_CSV_FILE_PATH = 'cleaned-excel-file.csv'
        HTML_FILE_PATH = 'Sprint_Planning.html'
        GITHUB_REPO_URL = 'https://github.com/StalkerJocca/AutomationExcel.git'
        GITHUB_BRANCH = 'main'
        GITHUB_FOLDER = 'Exported_HTML_Files'
        GITHUB_CREDENTIALS_ID = 'github-credentials' // Change this to your actual credentials ID
        EMAIL_RECIPIENT = 'joaocosta1695@gmail.com' // Change this to the desired email recipient
    }
    stages {
        stage('Download Excel File') {
            steps {
                script {
                    try {
                        // Download the Excel file from URL
                        sh """
                            curl -o ${EXCEL_FILE_PATH} ${EXCEL_FILE_URL}
                        """
                    } catch (e) {
                        echo "Error downloading Excel file: ${e.message}"
                        throw e
                    }
                }
            }
        }
        stage('Convert Excel to CSV') {
            steps {
                script {
                    try {
                        // Convert the Excel file to CSV using csvkit
                        sh """
                            in2csv ${EXCEL_FILE_PATH} > ${CSV_FILE_PATH}
                        """
                    } catch (e) {
                        echo "Error converting Excel to CSV: ${e.message}"
                        throw e
                    }
                }
            }
        }
        stage('Clean CSV File') {
            steps {
                script {
                    def csvContent = readFile file: "${CSV_FILE_PATH}"
                    // Perform cleaning operations on csvContent
                    def cleanedCsvContent = csvContent.split('\n').collect { line ->
                        // Replace multiple spaces with a single space
                        line.replaceAll(/\s+/, ' ').trim()
                    }.join('\n')
                    writeFile file: "${CLEANED_CSV_FILE_PATH}", text: cleanedCsvContent
                }
            }
        }
        stage('Generate HTML from CSV') {
            steps {
                script {
                    def TYPE_KEYWORDS = ["SPRINT", "QUAL", "PRIORITY"]
                    def TYPE_HEADINGS = ["RESUME", "EXPECTED DATES OF DEPLOYMENT", "DATES", "DEVELOPMENT AND SCOPE", "ANALYSE AND TESTING", "DEFINITION OF GOALS", "NOTES"]
                    def csvContent = readFile file: "${CLEANED_CSV_FILE_PATH}"
                    def lines = csvContent.split('\n')
                    
                    def htmlContent = """
                    <!DOCTYPE html>
                    <html>

                    <head>
                        <title>PLANNING | SCOPE</title>
                        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
                        <style>
                            
                            container { 
                                max-width: 1000px;
                                margin: auto;
                            }

                            .main-content {
                            margin-top: 30px;
                            }

                            table {
                                width: 100%;
                                table-layout: fixed;
                                align="center";
                                background-color: #f2f2f2; /* Add this line to set the background color to light gray */
                                border-collapse: collapse; /* Add this line to collapse the table borders */
                            }
                            th {
                                padding: 8px;
                                text-align: left;
                                white-space: nowrap;
                                overflow: hidden;
                                text-overflow: ellipsis;
                                background-color: #ff0000; /* Change the background color to red */
                                color: white;
                                font-weight: bold;
                            }
                            td {
                                padding: 8px;
                                text-align: left;
                                white-space: nowrap;
                                overflow: hidden;
                                text-overflow: ellipsis;
                                border-bottom: 1px solid #ddd; /* Add this line to add a bottom border to each cell */
                            }

                            tr:hover {
                                background-color: #f5f5f5; /* Add this line to set the hover background color to light gray */
                            }


                            .section-header {
                                    font-size: 18px;
                                    font-weight: bold;
                                    margin-bottom: 10px;
                                }

                            /* Add responsive header and footer styles */
                            header {
                            top: 0;
                            left: 0;
                            text-align: center;
                            width: 100%;
                            max-width: 1125px;
                            min-width: 200px;
                            margin: auto;
                            height: 70px; /* adjust the height to your needs */
                            display: flex;
                            justify-content: center;
                            align-items: center;
                            background-color: #333; /* optional */
                            box-shadow: 0 0 20px rgba(0, 0, 0, 0.4); /* optional */
                            }
                            header img {
                            width: 140px; /* adjust the width to your needs */
                            height: 50px; /* adjust the height to your needs */
                            margin-right: 0.5em;
                            }
                            header span {
                            font-size: 40px;
                            font-weight: bold;
                            margin-left: 0.5em;
                            color: #fff;
                            }
                            .footer {
                            background-color: #333;
                            color: #fff;
                            padding: 10px;
                            text-align: center;
                            clear: both;
                            width: 100%;
                            box-shadow: 0 0 20px rgba(0, 0, 0, 0.4); /* optional */
                            }
                            @media (max-width: 768px) {
                                .header,.footer {
                                    padding: 5px;
                                }
                            }
                        </style>
                    </head>

                    <tbody>
                    <header class="header">
                            <img src="https://xnbgtr.stripocdn.email/content/guids/CABINET_b2664dcd6b7ab082c7e0e810eec3a7bf97d2dc2b619ef620d690734fd25399fb/images/caceis_white.png" title="BST CONCERTO" alt="CACEIS">
                            <span>SPRINT PLANING</span>
                    </header> 
                        
                        <div class="main-content">
                            <div class="container">
                    """

                    boolean inTable = false
                        lines.drop(1).eachWithIndex { line, index ->
                            if (line.trim().isEmpty() || line.contains("TABLE")) {
                                if (inTable) {
                                    // Close the current table
                                    htmlContent += "</tbody></table>"
                                    htmlContent += "<br>" // Add a break after closing each table
                                    inTable = false
                                }
                            } else {
                                def columns = line.split(',')
                                if (columns.size() == 0) {
                                    return // Skip lines that do not have any columns
                                }

                                def firstColumn = columns[0].trim()

                                if (TYPE_KEYWORDS.any { keyword -> firstColumn.startsWith(keyword) }) {
                                    if (inTable) {
                                        // Close the current table before starting a new one
                                        htmlContent += "</tbody></table>"
                                        htmlContent += "<br>" // Add a break after each section header
                                    }
                                    inTable = true
                                    htmlContent += "<br>" // Add a break after each section header
                                    // Start a new table
                                    htmlContent += "<table class='table table-hover table-dark'><thead><tr>"
                                    // Use the current line as header
                                    htmlContent += columns.collect { header -> "<th>${header}</th>" }.join('')
                                    htmlContent += "</tr></thead><tbody>"
                                } else if (inTable) {
                                    if (TYPE_HEADINGS.any { firstColumn.startsWith(it) }) {
                                        // Close the table when encountering "TYPE_HEADINGS"
                                        htmlContent += "</tbody></table>"
                                        inTable = false
                                        htmlContent += "<br>" // Add a break after each section header
                                        htmlContent += "<h4 class='section-header'>${columns.join(', ')}</h4>"
                                        htmlContent += "<hr style='border: 1px solid #ccc; margin: 10px 0;'>" // Add a horizontal line after the break
                                        htmlContent += "<br>" // Add a break after each section header
                                    } else {
                                        // Add row to the table
                                        //htmlContent += "<tr>${columns.collect { column -> "<td>${column}</td>" }.join('')}</tr>"
                                        def rowHtml = """<tr>"""
                                            columns.each { column ->
                                            if (column.trim().contains("DEFECT")) {
                                                rowHtml += "<td style='background-color: #FF0000;'>${column}</td>" // Red background for DEFECT
                                            } else if (column.trim().contains("STORY")) {
                                                rowHtml += "<td style='background-color: #09A060;'>${column}</td>" // Green background for STORY
                                            } else if (column.trim().contains("CHANGE REQUEST")) {
                                                rowHtml += "<td style='background-color: #04BF70;'>${column}</td>" // Green background for CHANGE REQUEST
                                            } else if (column.trim().contains("CANCELLED")) {
                                                rowHtml += "<td style='background-color: #16492C;'>${column}</td>" // Green background for CANCELLED
                                            } else if (column.trim().contains("CLOSED")) {
                                                rowHtml += "<td style='background-color: #09A060;'>${column}</td>" // Green background for CLOSED
                                            } else if (column.trim().contains("DEVELOPMENT")) {
                                                rowHtml += "<td style='background-color: #1E4893;'>${column}</td>" // Green background for DEVELOPMENT
                                            } else if (column.trim().contains("TO START DEVELOPMENT")) {
                                                rowHtml += "<td style='background-color: #5A6578;'>${column}</td>" // Green background for TO START DEVELOPMENT
                                            } else if (column.trim().contains("UAT")) {
                                                rowHtml += "<td style='background-color: #321361;'>${column}</td>" // Green background for UAT
                                            } else if (column.trim().contains("IT ADM")) {
                                                rowHtml += "<td style='background-color: #2286E5;'>${column}</td>" // Green background for IT ADM
                                            } else {
                                                rowHtml += "<td>${column}</td>"
                                            }
                                        }
                                        rowHtml += "</tr>"
                                        htmlContent += rowHtml
                                    }
                                } else {
                                    if (TYPE_HEADINGS.any { firstColumn.startsWith(it) }) {
                                        htmlContent += "<br>" // Add a break after each section header
                                        htmlContent += "<h4 class='section-header'>${columns.join(', ')}</h4>"
                                        htmlContent += "<hr style='border: 1px solid #ccc; margin: 10px 0;'>" // Add a horizontal line after the break
                                        
                                    } else if (firstColumn.startsWith("*-")) {
                                        if (inTable) {
                                            // Close the current table
                                            htmlContent += "</tbody></table>"
                                            inTable = false
                                        }
                                       htmlContent += "<p><span style='color: #b30000;'>&bull;</span> ${columns.join(', ').replaceFirst('\\*', '')}</p>"
                                    } else {
                                        if (firstColumn.matches(/^[A-Z][a-zA-Z]*$/)) {
                                            // Add paragraph if the first column starts with capital letters
                                            // htmlContent += "<p>${columns[0..<(columns.size() - 3)].join(' ')}</p>"
                                            htmlContent += "<p>${columns[0..<(columns.size() - 3)].findAll { it.trim() }.join(' ')}</p>"
                                        } else {
                                            // Add paragraph with bullet point if the first column does not start with capital letters
                                            htmlContent += "<p><span style='color: #b30000;'>&bull;</span> ${columns.findAll { it.trim() }.join(' ')}</p>"
                                            //htmlContent += "<p><span style='color: #b30000;'>&bull;</span>${columns.join(' ')}</p>"
                                        }
                                    }
                                }
                            }
                        }
                        
                        if (inTable) {
                            // Close the table if still open
                            htmlContent += "</tbody></table>"
                            htmlContent += "<br>" // Add a break after each section header
                        }

                        htmlContent += """
                                <footer class="footer">
                                    <p>&copy; 2024 Joao Carlos Costa</p><br>
                                    <p>Project Manager | Scrum Master - joao.costa@caceis.com</p>
                                </footer>
                                </div>
                                </div>
                            </body>
                            </html>
                            """

                        writeFile file: "${HTML_FILE_PATH}", text: htmlContent

                        // Archive the HTML file in Jenkins
                        archiveArtifacts artifacts: "${HTML_FILE_PATH}", allowEmptyArchive: true

                        // Show the path of the created HTML file
                        echo "HTML file created: ${env.WORKSPACE}/${HTML_FILE_PATH}"

                        // Optionally, you can make the HTML file available for downloading
                        echo "HTML file created: ${HTML_FILE_PATH}"
                }
            }
        }
        stage('Upload HTML to GitHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${GITHUB_CREDENTIALS_ID}", usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_PASSWORD')]) {
                    script {
                            def incrementedHTMLFilePath = sh(script: """
                                cd AutomationExcel/${GITHUB_FOLDER}
                                baseName=\$(basename "${HTML_FILE_PATH}" .html)
                                extension=".html"
                                index=1
                                while [ -f "\${baseName}_\${index}\${extension}" ]; do
                                    index=\$((index + 1))
                                done
                                echo "\${baseName}_\${index}\${extension}"
                            """, returnStdout: true).trim()

                            sh """
                                if [ -d "AutomationExcel" ]; then
                                    cd AutomationExcel
                                    git pull
                                else
                                    git clone https://${GITHUB_USERNAME}:${GITHUB_PASSWORD}@github.com/StalkerJocca/AutomationExcel.git
                                    cd AutomationExcel
                                fi
                                mkdir -p ${GITHUB_FOLDER}
                                cp ../${HTML_FILE_PATH} ${GITHUB_FOLDER}/${incrementedHTMLFilePath}
                                cd ${GITHUB_FOLDER}
                                git add ${incrementedHTMLFilePath}
                                git config user.name "${GITHUB_USERNAME}"
                                git config user.email "joaocosta1695@gmail.com"
                                git commit -m 'Automated upload of HTML file'
                                git push origin ${GITHUB_BRANCH}
                            """
                    }
                }
            }   
        }
        stage('Zip HTML File') {
            steps {
                script {
                    def htmlFilePath = "${env.WORKSPACE}/Sprint_Planning.html"
                    def zipFilePath = "Sprint_Planning.zip"  // Use a relative path for the zip file

                    if (fileExists(htmlFilePath)) {
                        echo "HTML file exists: ${htmlFilePath}"

                        try {
                            // Create a zip file using jar command with properly quoted paths
                            sh "jar -cf \"${zipFilePath}\" -C \"${env.WORKSPACE}\" Sprint_Planning.html"
                            echo "Zip file created successfully: ${env.WORKSPACE}/${zipFilePath}"
                        } catch (Exception e) {
                            error "Failed to create zip file: ${e.message}"
                        }

                        // Check if the zip file is created
                        if (fileExists(zipFilePath)) {
                            echo "Zip file created successfully: ${env.WORKSPACE}/${zipFilePath}"
                        } else {
                            error "Zip file not created: ${env.WORKSPACE}/${zipFilePath}"
                        }

                        // Archive the zip file as an artifact using a relative path
                        archiveArtifacts artifacts: zipFilePath, allowEmptyArchive: true
                    } else {
                        error "HTML file not found: ${htmlFilePath}"
                    }
                }
            }
        }   
        /*
        stage('Send HTML to Email') {
            steps {
                script {
                    def emailSubject = "Sprint Planning HTML Report"
                    def emailFrom = "StalkerJocca"
                    def emailBody = "Please find the Sprint Planning HTML report attached."
                    def emailRecipient = "${EMAIL_RECIPIENT}"
                    def zipFilePath = "${WORKSPACE}/Sprint_Planning.zip"

                    echo "Workspace directory: ${WORKSPACE}"
                    echo "Zip file path: ${zipFilePath}"

                    if (new File(zipFilePath).exists()) {
                        echo "Zip file exists: ${zipFilePath}"
                        mail (
                            subject: emailSubject,
                            from: emailFrom,
                            body: emailBody,
                            to: emailRecipient,
                            attachments: zipFilePath,
                            contentType: 'text/html'
                        )
                    } else {
                        error "Zip file not found: ${zipFilePath}"
                    }
                }
            }
        }
    */
    }
}