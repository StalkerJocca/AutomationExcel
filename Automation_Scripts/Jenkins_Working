pipeline {
    agent any
    environment {
        EXCEL_FILE_URL = 'https://raw.githubusercontent.com/StalkerJocca/AutomationExcel/main/Excel_Files/teste.xlsx'
        EXCEL_FILE_PATH = 'excel-file.xlsx'
        CSV_FILE_PATH = 'excel-file.csv'
        CLEANED_CSV_FILE_PATH = 'cleaned-excel-file.csv'
        HTML_FILE_PATH = 'excel-data.html'
        GITHUB_REPO_URL = 'https://github.com/StalkerJocca/AutomationExcel.git'
        GITHUB_BRANCH = 'main'
        GITHUB_FOLDER = 'Exported_HTML_Files'
        GITHUB_CREDENTIALS_ID = 'github-credentials' // Change this to your actual credentials ID
    }
    stages {
        stage('Download Excel File') {
            steps {
                script {
                    try {
                        // Download the Excel file from URL
                        sh """
                            curl -o ${EXCEL_FILE_PATH} ${EXCEL_FILE_URL}
                        """
                    } catch (e) {
                        echo "Error downloading Excel file: ${e.message}"
                        throw e
                    }
                }
            }
        }
        stage('Convert Excel to CSV') {
            steps {
                script {
                    try {
                        // Convert the Excel file to CSV using csvkit
                        sh """
                            in2csv ${EXCEL_FILE_PATH} > ${CSV_FILE_PATH}
                        """
                    } catch (e) {
                        echo "Error converting Excel to CSV: ${e.message}"
                        throw e
                    }
                }
            }
        }
        stage('Clean CSV File') {
            steps {
                script {
                    def csvContent = readFile file: "${CSV_FILE_PATH}"
                    // Perform cleaning operations on csvContent
                    def cleanedCsvContent = csvContent.split('\n').collect { line ->
                        // Replace multiple spaces with a single space
                        line.replaceAll(/\s+/, ' ').trim()
                    }.join('\n')
                    writeFile file: "${CLEANED_CSV_FILE_PATH}", text: cleanedCsvContent
                }
            }
        }
        stage('Generate HTML from CSV') {
            steps {
                script {
                        def TYPE_KEYWORDS = ["SPRINT", "QUAL", "PRIORITY", "PROJECT", "DATES"]
                        def csvContent = readFile file: "${CLEANED_CSV_FILE_PATH}"
                        def lines = csvContent.split('\n')
                        
                        def htmlContent = """
                        <!DOCTYPE html>
                        <html>

                        <head>
                            <title>PLANNING | SCOPE</title>
                            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
                            <style>
                                table { width: 100%; }
                                th, td { padding: 8px; text-align: left; }
                                th { background-color: #f2f2f2; }
                                .section-header {
                                        font-size: 18px;
                                        font-weight: bold;
                                        margin-bottom: 10px;
                                    }

                                /* Add responsive header and footer styles */
                                .header {
                                        background-color: #333;
                                        color: #fff;
                                        padding: 0px;
                                        text-align: center;
                                        width: 100%;
                                        position: relative;
                                    }
                                .header img {
                                        width: 100%;
                                        height: 50px;
                                        object-fit: cover;
                                        object-position: center;
                                    }
                                .footer {
                                        background-color: #333;
                                        color: #fff;
                                        padding: 10px;
                                        text-align: center;
                                        clear: both;
                                        width: 100%;
                                    }
                                    @media (max-width: 768px) {
                                    .header,.footer {
                                            padding: 5px;
                                        }
                                    }
                            </style>
                        </head>

                        <tbody>
                            <div class="container">
                                    <header class="header">
                                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/3b/CACEIS_Bank_logo.svg/1280px-CACEIS_Bank_logo.svg.png" alt="CACEIS">
                                        <h1>PLANNING | SCOPE</h1>                             
                                    </header>
                        """

                        boolean inTable = false
                        boolean skipNextLine = false
                        lines.eachWithIndex { line, index ->
                            if (line.trim().isEmpty()) {
                                if (inTable) {
                                    // Close the current table
                                    htmlContent += "</tbody></table>"
                                    inTable = false
                                    skipNextLine = false
                                }
                                return // Skip empty lines
                            }
                            
                            def columns = line.split(',')
                            if (columns.size() == 0) {
                                return // Skip lines that do not have any columns
                            }

                            def firstColumn = columns[0].trim()

                            if (TYPE_KEYWORDS.any { keyword -> firstColumn.startsWith(keyword) }) {
                                if (!inTable) {
                                    inTable = true
                                    skipNextLine = true
                                    // Start a new table
                                    htmlContent += "<table class='table table-striped'><thead><tr>"
                                    // Use the current line as header
                                    htmlContent += columns.collect { header -> "<th>${header}</th>" }.join('')
                                    htmlContent += "</tr></thead><tbody>"
                                }
                            } else if (inTable) {
                                if (skipNextLine) {
                                    // Skip the line immediately following the keyword line
                                    skipNextLine = false
                                } else {
                                    // Add row to the table
                                    htmlContent += "<tr>${columns.collect { column -> "<td>${column}</td>" }.join('')}</tr>"
                                }
                            } else {
                                // Add paragraph
                                htmlContent += "<p>${line}</p>"
                            }
                        }
                        
                        if (inTable) {
                            // Close the table if still open
                            htmlContent += "</tbody></table>"
                        }

                        htmlContent += """
                                <footer class="footer">
                                    <p>&copy; 2024 Jo√£o Carlos Costa</p><br>
                                    <p>Project Manager | Scrum Master - joao.costa@caceis.com</p>
                                </footer>
                                </div>
                            </body>
                            </html>
                            """

                        writeFile file: "${HTML_FILE_PATH}", text: htmlContent

                        // Archive the HTML file in Jenkins
                        archiveArtifacts artifacts: "${HTML_FILE_PATH}", allowEmptyArchive: true

                        // Show the path of the created HTML file
                        echo "HTML file created: ${env.WORKSPACE}/${HTML_FILE_PATH}"

                        // Optionally, you can make the HTML file available for download
                        echo "HTML file created: ${HTML_FILE_PATH}"
                }
            }
        }
        stage('Upload HTML to GitHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${GITHUB_CREDENTIALS_ID}", usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_PASSWORD')]) {
                    script {
                            def incrementedHTMLFilePath = sh(script: """
                                cd AutomationExcel/${GITHUB_FOLDER}
                                baseName=\$(basename "${HTML_FILE_PATH}" .html)
                                extension=".html"
                                index=1
                                while [ -f "\${baseName}_\${index}\${extension}" ]; do
                                    index=\$((index + 1))
                                done
                                echo "\${baseName}_\${index}\${extension}"
                            """, returnStdout: true).trim()

                            sh """
                                if [ -d "AutomationExcel" ]; then
                                    cd AutomationExcel
                                    git pull
                                else
                                    git clone https://${GITHUB_USERNAME}:${GITHUB_PASSWORD}@github.com/StalkerJocca/AutomationExcel.git
                                    cd AutomationExcel
                                fi
                                mkdir -p ${GITHUB_FOLDER}
                                cp ../${HTML_FILE_PATH} ${GITHUB_FOLDER}/${incrementedHTMLFilePath}
                                cd ${GITHUB_FOLDER}
                                git add ${incrementedHTMLFilePath}
                                git config user.name "${GITHUB_USERNAME}"
                                git config user.email "joaocosta1695@gmail.com"
                                git commit -m 'Automated upload of HTML file'
                                git push origin ${GITHUB_BRANCH}
                            """
                        }
                }
            }
        }
    }
}
